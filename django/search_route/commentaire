# ################# update profile APIView #############################

# class UpdateProfileSerializer(serializers.ModelSerializer):

#     email = serializers.EmailField(required=True)

#     class Meta:
#         model = User
#         fields = ('username', 'first_name', 'last_name', 'email', 'url_image')
#         extra_kwargs = {
#             'first_name': {'required': True},
#             'last_name': {'required': True},
#         }

#     def validate_email(self, value):
#         user = self.context['request'].user
#         if User.objects.exclude(pk=user.pk).filter(email=value).exists():
#             raise serializers.ValidationError({"email": "This email is already in use."})
#         return value

#     def validate_username(self, value):
#         user = self.context['request'].user
#         if User.objects.exclude(pk=user.pk).filter(username=value).exists():
#             raise serializers.ValidationError({"username": "This username is already in use."})
#         return value

#     ## L'utilisateur connecté doit être le même que l'utilisateur à mettre à jour.####

#     def update(self, instance, validated_data):

#         user = self.context['request'].user

#         if user.pk != instance.pk:
#             raise serializers.ValidationError({"authorize": "You dont have permission for this user."})

#         instance.first_name = validated_data['first_name']
#         instance.last_name = validated_data['last_name']
#         instance.email = validated_data['email']
#         instance.username = validated_data['username']
#         instance.url_image = validated_data['url_image']

#         instance.save()

#         return instance

################# Change password #############################
# class ChangePasswordSerializer(serializers.ModelSerializer):

#         old_password = serializers.CharField(required=True)
#         new_password = serializers.CharField(required=True)

#         class Meta:
#             model = User
#             fields = ('old_password', 'new_password')

        
#         def validate_new_password(self, value):
#             validate_password(value)
#             return value








# class UpdateRouteAPIView(RetrieveUpdateAPIView):

#     serializer_class = RouteSerializer

#     permission_classes = (IsAuthenticated,)

#     lookup_field = "route_id"

#     def get_queryset(self):
#          return Route.objects.filter(user_id=self.request.user)



# class DeleteRouteAPIView(RetrieveDestroyAPIView):

#     serializer_class = RouteSerializer

#     permission_classes = (IsAuthenticated,)

#     lookup_field = "route_id"

#     def get_queryset(self):
#          return Route.objects.filter(user_id=self.request.user)









################### ROUTE ###################
# class CreateRouteAPIView(CreateAPIView):

#     serializer_class = RouteSerializer

#     permission_classes = (IsAuthenticated,)

#     def perform_create(self, serializer):
#         return serializer.save(user_id=self.request.user)


# class RouteListAPIView(ListAPIView):

#     serializer_class = RouteSerializer

#     permission_classes = (IsAuthenticated,)
    
#     def get_queryset(self):
#         return Route.objects.filter(user_id=self.request.user)

